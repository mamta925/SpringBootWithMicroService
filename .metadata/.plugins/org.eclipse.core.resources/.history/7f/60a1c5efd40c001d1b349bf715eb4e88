package com.spr;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

@RestController
public class PersonController {

    @Autowired PersonService personService;
    
    @RequestMapping("/")
    public java.util.List<Person> getAllRecords(){
        return personService.getAllPersons();        
    }
    @RequestMapping("/getPerson")
    public ModelAndView getPerson() {
        return new ModelAndView("getPerson");
    }
    
    @PostMapping("/persons")
    public Person createPerson(@RequestBody Person person) {
        System.out.println("Record Added");
        return personService.personRepository.save(person);
    }

    @RequestMapping("/getByID")
    public Optional<Person> getPersonByID(@RequestParam("pid") String id) {
         return personService.getPerson(Integer.parseInt(id));
    }
    

    @RequestMapping("/menu")
    public String test() {
	    return "menu";
    }
 

    @RequestMapping("/myForm")
    public ModelAndView show() {
	    ModelAndView modelAndView = new ModelAndView("myForm","command", new Person());
	    modelAndView.setViewName("myForm");
	    return modelAndView;
    }

    @RequestMapping(value="/add-person", method=RequestMethod.POST)  
     public ModelAndView home(@ModelAttribute Person p) {
        ModelAndView modelAndView = new ModelAndView();
        modelAndView.setViewName("validate");
        personService.addPerson(p);
        System.out.println(p.getPname() );
        modelAndView.addObject("user",p);
     return modelAndView;
  }
    
 // for rest mapping 
    @RequestMapping(value="/person/{id}", method=RequestMethod.GET)  
    public Optional<Person> getUser(@PathVariable Integer id){  
        return personService.getPerson(id);  
    }  
    
    @RequestMapping(value="/getPerson/{id}")
    public ModelAndView update(@PathVariable("id")String id) {
        Optional<Person> person=personService.getPerson(Integer.parseInt(id));
     return new ModelAndView("updatePerson").addObject("person", person.get());    
    }

    @RequestMapping(value="updateMe", method= RequestMethod.POST)
    public ModelAndView updated(@ModelAttribute Person p) {
        ModelAndView modelAndView = new ModelAndView();
        modelAndView.setViewName("validate");
        personService.addPerson(p);
        System.out.println(p.getPname() +" "+p.getPjob() );
        modelAndView.addObject("user",p);
        return modelAndView;
    }
    
     //for rest mapping
    @RequestMapping(value="/viewAll")
    public java.util.List<Person> getAll(){
        return personService.getAllPersons();
    }

    @RequestMapping(value="updateperson/{pid}")
    public Person updatePerson(@RequestBody Person person ,@PathVariable("pid")int pid) {
        person.setPid(pid);
        return personService.personRepository.save(person);
    }

    @GetMapping({"/list","/"})
    public ModelAndView getAllPersons() {
        return new ModelAndView("list-persons").addObject("persons",personService.getAllPersons());
    }


   @PutMapping("/updPerson")
    public Person updatePersob(/*@PathVariable("pid") int id,*/ @RequestBody Person person) {
        System.out.println(person);
        Person p=personService.updatePerson(person); 
        return p;
    }
   
   @GetMapping("/personByJob")
   public ResponseEntity<java.util.List<Person>> getPersonsByJobContains(@RequestParam String pjob) {
       return new ResponseEntity<java.util.List<Person>>(personService.getPersonByJob(pjob), HttpStatus.OK);
   }


}
